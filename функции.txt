· struct - Ключевое слово определяет тип структуры и (или) переменную типа структуры.
· GLuint gWorldLocation - указатель для доступа к всемирной матрице виртуального мира.
°° далее нам нужно рассмотреть uniform-переменные. перейдём к 5 уроку.
· uniform-переменные. Разница между атрибутом и uniform-переменной в том, что атрибут
хранит данные, указанные вершиной, поэтому они получают новые значения из вершинного
буфера, в то время как для каждого вызова шейдера значение uniform-переменной остаётся
постоянным с момента вызова отрисовки. Это значит, что необходимо указать значение,
прежде чем вызвать функцию отрисовки, и вы получите одинаковое значение для каждого
вызова вершинного шейдера. Uniform-переменные полезны для хранения данных таких как
параметры света (позиция источника света, его направление и т.д.), трансформации матриц,
указатели на объект текстуры и так далее.
· glutIdleFunc(RenderSceneCB) - команда устанавливает функцию в качестве "ленивой" -
она вызывается даже тогда, когда не происходит необходимых для перезапуска рендера
событий.
· glutPostRedisplay() - команда прекращает вызов ленивой функции. Она показывает, что
текущее окно должно быть отрисовано заново, что запускает функцию рендера уже
непосредственно через главный цикл GLUT'a.
°° Далее нам нужно рассмотреть функции шейдеров. Вернёмся к уроку 4.
Создадим конвейер. Для начала - функция создания шейдера.
· glCreateProgram() - создаёт программный объект и возвращает ненулевое значение, с
помощью которого на него можно ссылаться. Программный объект - это объект, к которому
могут быть присоединены шейдерные объекты. Это обеспечивает механизм для указания
объектов шейдера, которые будут связаны для создания программы. Он также предоставляет
средства для проверки совместимости шейдеров, которые будут использоваться для создания
программы (например, проверка совместимости между вершинным шейдером и фрагментным
шейдером).
· glCreateShader(GLenum shaderType) - создаёт объект шейдера. shaderType: определяет
тип создаваемного шейдера: GL_COMPUTE_SHADER, GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER,
GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER, or GL_FRAGMENT_SHADER.
 Шейдер типа GL_COMPUTE_SHADER - это шейдер, который предназначен для запуска на
программируемом компьютерном процессоре. Шейдер типа GL_VERTEX_SHADER - это шейдер,
который предназначен для запуска на программируемом процессоре вершин. Шейдер типа
GL_TESS_CONTROL_SHADER - это шейдер, который предназначен для запуска на программируемом
процессоре тесселяции на этапе управления. Шейдер типа GL_TESS_EVALUATION_SHADER - это
шейдер, который предназначен для запуска на программируемом процессоре тесселяции на
этапе оценки. Шейдер типа GL_GEOMETRY_SHADER - это шейдер, который предназначен для
работы на процессоре программируемой геометрии. Шейдер типа GL_FRAGMENT_SHADER - это
шейдер, который предназначен для запуска на программируемом процессоре фрагментов.
· lShaderSource(GLuint shader, GLsizei count, const GLchar **string, const GLint *length)-
1-й параметр - тип шейдера, второй - количество элементов в массиве символов (у нас это
массив p, состоящий из одного элемента - pShaderText. Третий - сам этот массив символов.
Четвёртый - массив, содержащий длину строки для каждого из существующих элементов в массиве
символов p.
· glCompileShader(GLuint shader) - компилирует объект шейдера. У нас - объект ShaderObj.
· glGetShaderiv(GLuint shader, GLenum pname, GLint *params) - возвращает в переменную
params (у нас это success) параметр pname (у нас это - статус компиляции GL_COMPILE_STATUS) 
шейдера shader (ShaderObj). Может также вернуть тип шейдера, статус удаления и тд.
· glGetShaderInfoLog(GLuint shader, GLsizei maxLength, GLsizei *length, GLchar *infoLog)-
получает информацию об объекте шейдера в массив infoLog.
· glAttachShader(GLuint program, GLuint shader) - функция присоединяет скомпилированный
объект шейдера к объекту программы. У нас program - ShaderProgram, shader - ShaderObj.
· glLinkProgram(GLuint program) - связали объект шейдера с программой. Шейдерный объект типа
GL_VERTEX_SHADER будет использоваться для создания исполняемого файла, который будет
выполняться на программируемом вершинном процессоре, а файлы объект типа GL_FRAGMENT_SHADER
будут выполняться на программируемом процессоре фрагментов.
· glValidateProgram(GLuint program) - проверяем, сможет ли программа запуститься с текущим
состоянием конвейера.
· glUseProgram(ShaderProgram) - назначаем нашу программу для использования в конвейера.
°°Шейдеры настроены. Возвращаемся к uniform-переменным.
· glGetUniformLocation(GLuint program, const GLchar *name) - возвращает местоположение
uniform-переменной с именем name в программном объекте program. У нас программа -
ShaderProgram, переменная называется "gScale".
· assert(int expression) - оценивает выражение, которое передается ей в качестве аргумента,
через параметр expression. Если аргумент-выражение этого макроса в функциональной форме
равно нулю (т.е. выражение ложно), сообщение записывается на стандартное устройство
вывода ошибок и вызывается функция abort, работа программы прекращается.
· glUniform1f(gScaleLocation, sinf(Scale)) - определяем значение нашей uniform-переменной
°°определили uniform-переменную. Теперь наш треугольник может увеличиваться и уменьшаться.
Вернёмся к матрицам.
· glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *
value) - определили значение нашей uniform-переменной gScaleLocation. Второй параметр - 
количество мартиц, значение которых мы обновляем (1). Третий - показывает, подаётся ли
матрица по строковому или столбиковому порядку. Мы упорядочили по строковому: GL_TRUE.